source('C:/Users/joshu/Downloads/TCGA-Assembler-20170529T165157Z-001.zip', encoding = 'UTF-8')
source('C:/Users/joshu/Downloads/TCGA-Assembler-20170529T165157Z-001/TCGA-Assembler/Module_A.R', encoding = 'UTF-8')
memory.limit()
memory.size()
memory.limit(50000)
ColumnName1 <- strsplit(ReadIn, split = "\t")[[1]]
demo()
ColumnName1 <- strsplit(ReadIn, split = "\t")[[1]]
library(RCurl)
library(RCurl)
install.packages(c("tidyverse", "RSQLite"))
memory.limit(60000)
library(tidyverse)
library(data.table)
library(xlsx)
library(data.table)
merged_data <- read.csv("data/BRCAMerged-NoClin.csv")
merged_data <- read.csv("data/BRCAMerged-NoClin.csv")
memory.limit(60000)
library(tidyverse)
library(data.table)
merged_data <- read.csv("data/BRCAMerged-NoClin.csv")
merged_data <- read.csv("data/BRCAMerged-NoClin.csv")
memory.limit(60000)
library(tidyverse)
library(data.table)
merged_data <- read.csv("data/BRCAMerged-NoClin.csv")
clinical_data <- read.csv("data/BRCA.clin.merged.csv")
memory.limit(60000)
library(tidyverse)
library(data.table)
merged_data <- read.csv("data/BRCAMerged-NoClin.csv")
merged_data <- read.csv("data/BRCAMerged-NoClin.csv")
?read.csv()
q()
#Data Preprocessing
# no libraries need for this in R
dataset = read.csv('~/ISC215/python/dataInterpreter/Data.csv')
#correcting for missing data
dataset$Age = ifelse(is.na(dataset$Age),
ave(dataset$Age,
FUN = function(x)mean(x,na.rm = TRUE)),
dataset$Age)
dataset$Salary = ifelse(is.na(dataset$Salary),
ave(dataset$Salary,
FUN = function(x)mean(x,na.rm = TRUE)),
dataset$Salary)
#encode categorical data
dataset$City = factor(dataset$City,
levels = c('Syracuse','Oswego','Buffalo','Albany'),
labels = c('Syracuse','Oswego','Buffalo','Albany'))#labels = c(1,2,3,4))
dataset$Purchased = factor(dataset$Purchased,
levels = c('Yes','No'),
labels = c('Yes','No'))#labels = c(1,2,3,4))
#split dataset into training set and test set
#importing required library
##########install.packages('caTools')
###########library(caTools)              these two lines were needed until it was installed. It is now no longer required to be run
set.seed(123) #This is so we all get the same result
split = sample.split(dataset$Purchased,SplitRatio = .8) #Sets training to 80%
trainingset = subset(dataset,split == TRUE)
testset = subset(dataset,split == FALSE)
#feature scale ---- age is scaled differently than the salary
trainingset[,2:3] = scale(trainingset[,2:3])
testset[,2:3] = scale(testset[,2:3])
#Data Preprocessing
# no libraries need for this in R
dataset = read.csv('~/ISC215/python/dataInterpreter/Data.csv')
#correcting for missing data
dataset$Age = ifelse(is.na(dataset$Age),
ave(dataset$Age,
FUN = function(x)mean(x,na.rm = TRUE)),
dataset$Age)
dataset$Salary = ifelse(is.na(dataset$Salary),
ave(dataset$Salary,
FUN = function(x)mean(x,na.rm = TRUE)),
dataset$Salary)
#encode categorical data
dataset$City = factor(dataset$City,
levels = c('Syracuse','Oswego','Buffalo','Albany'),
labels = c('Syracuse','Oswego','Buffalo','Albany'))#labels = c(1,2,3,4))
dataset$Purchased = factor(dataset$Purchased,
levels = c('Yes','No'),
labels = c('Yes','No'))#labels = c(1,2,3,4))
#split dataset into training set and test set
#importing required library
##########install.packages('caTools')
library(caTools)              #these two lines were needed until it was installed. It is now no longer required to be run
set.seed(123) #This is so we all get the same result
split = sample.split(dataset$Purchased,SplitRatio = .8) #Sets training to 80%
trainingset = subset(dataset,split == TRUE)
testset = subset(dataset,split == FALSE)
#feature scale ---- age is scaled differently than the salary
trainingset[,2:3] = scale(trainingset[,2:3])
testset[,2:3] = scale(testset[,2:3])
pbinom(4, 25, .2)
1- pbinom(2, 25, .2)
dbinom(4, 25, .2)
pbinom(4, 25, .2) - pbinom(3, 25, .2)
binom.test(x=c(32, 23), p=0.5, alternative="two.sided")
chisq.test(x=c(32, 23), p=0.5, alternative="two.sided")
chisq.test(x=c(32, 23))
x = c(186, 171, 177, 168, 191, 172, 177, 191, 170, 171, 188, 187)
y = c(188, 177, 176, 169, 196, 172, 165, 190, 166, 180, 181, 172)
wilcox.test(x, y, paired=T)
x = c(186, 171, 177, 168, 191, 172, 177, 191, 170, 171, 188, 187)
y = c(188, 177, 176, 169, 196, 172, 165, 190, 166, 180, 181, 172)
wilcox.test(x, y, paired=TRUE)
x = c(186, 171, 177, 168, 191, 172, 177, 191, 170, 171, 188, 187)
y = c(188, 177, 176, 169, 196, 172, 165, 190, 166, 180, 181, 172)
wilcox.test(x ~ y, paired=TRUE)
x = c(2, 6, -1, 1, 5, 0, -12, -1, -4, 9, -7, -15)
y = c(188, 177, 176, 169, 196, 172, 165, 190, 166, 180, 181, 172)
wilcox.test(x)
x = c(186, 171, 177, 168, 191, 172, 177, 191, 170, 171, 188, 187)
y = c(188, 177, 176, 169, 196, 172, 165, 190, 166, 180, 181, 172)
wilcox.test(x, y, paired=TRUE)
x = c(186, 171, 177, 168, 191, 172, 177, 191, 170, 171, 188, 187)
y = c(188, 177, 176, 169, 196, 172, 165, 190, 166, 180, 181, 172)
wilcox.test(x, y, paired=TRUE, conf.int = T)
q()
offense = read.csv("../../data/passOffenseNormalized.csv")
getwd()
setwd("STA6704/2019JAX_PlayByPlay/Pass/")
offense = read.csv("../../data/passOffenseNormalized.csv")
setwd("ClusterAnalysis/")
offense = read.csv("../../data/passOffenseNormalized.csv")
offense = read.csv("../../data/passOffenseNormalized.csv")
defense = read.csv("../../data/passDefenseNormalized.csv")
offense = subset(offense, select = -c(X))
defense = subset(defense, select = -c(X))
######## Offense ###########
set.seed(32)
factoextra::fviz_nbclust(
x = offense,
FUNcluster = kmeans,
method = "wss"
)
factoextra::fviz_nbclust(
x = offense,
FUNcluster = kmeans,
method = "silhouette"
)
offense_clusGap_kmeans <- cluster::clusGap(
x = offense,
FUNcluster = kmeans,
K.max = 40,
iter.max = 50
)
# Plot those results
factoextra::fviz_gap_stat(
gap_stat = offense_clusGap_kmeans
)
factoextra::fviz_nbclust(
x = offense,
FUNcluster = kmeans,
method = "gap_stat"
)
############## offense k = 4 ###########
offense_kmeans4 = kmeans(
x = offense,
centers = 4
)
# basic view
offense_kmeans4
offense_PC = data.frame(
prcomp(
x = offense,
center = FALSE,
scale. = FALSE
)$x[, 1:2],
Cluster = as.character(offense_kmeans4$cluster),
stringsAsFactors = FALSE
)
############## offense k = 4 ###########
offense_kmeans4 = kmeans(
x = offense,
centers = 4
)
# basic view
offense_kmeans4
offense_PC = data.frame(
prcomp(
x = offense,
center = FALSE,
scale. = FALSE
)$x[, 1:2],
Cluster = as.character(offense_kmeans4$cluster),
stringsAsFactors = FALSE
)
require(ggplot2)
require(ggforce)
useful::plot.kmeans(
x = offense_kmeans4,
data = offense
)
fpc::plotcluster(
x=offense,
clvecd = offense_kmeans4$cluster
)
offense_clara <- cluster::clara(
x = offense,
k = 4
)
plot(offense_clara)
offense_kmeans8 = kmeans(
x = offense,
centers = 8
)
# basic view
offense_kmeans8
offense_PC8 = data.frame(
prcomp(
x = offense,
center = FALSE,
scale. = FALSE
)$x[, 1:2],
Cluster = as.character(offense_kmeans8$cluster),
stringsAsFactors = FALSE
)
useful::plot.kmeans(
x = offense_kmeans8,
data = offense
)
fpc::plotcluster(
x=offense,
clvecd = offense_kmeans9$cluster
)
fpc::plotcluster(
x=offense,
clvecd = offense_kmeans8$cluster
)
offense_clara8 <- cluster::clara(
x = offense,
k = 8
)
plot(offense_clara8)
print(offense_clara8)
####### Defense #############
factoextra::fviz_nbclust(
x = defense,
FUNcluster = kmeans,
method = "wss"
)
factoextra::fviz_nbclust(
x = defense,
FUNcluster = kmeans,
method = "silhouette"
)
defense_clusGap_kmeans <- cluster::clusGap(
x = defense,
FUNcluster = kmeans,
K.max = 40,
iter.max = 50
)
# Plot those results
factoextra::fviz_gap_stat(
gap_stat = defense_clusGap_kmeans
)
factoextra::fviz_nbclust(
x = defense,
FUNcluster = kmeans,
method = "gap_stat",
iter.max = 50
)
############## defense k = 5 ###########
defense_kmeans5 = kmeans(
x = defense,
centers = 5
)
####### Defense #############
factoextra::fviz_nbclust(
x = defense,
FUNcluster = kmeans,
method = "wss"
)
factoextra::fviz_nbclust(
x = defense,
FUNcluster = kmeans,
method = "silhouette"
)
defense_clusGap_kmeans <- cluster::clusGap(
x = defense,
FUNcluster = kmeans,
K.max = 40,
iter.max = 50
)
# Plot those results
factoextra::fviz_gap_stat(
gap_stat = defense_clusGap_kmeans
)
factoextra::fviz_nbclust(
x = defense,
FUNcluster = kmeans,
method = "gap_stat",
iter.max = 50
)
############## defense k = 5 ###########
defense_kmeans5 = kmeans(
x = defense,
centers = 5
)
# basic view
defense_kmeans5
offense = read.csv("../../data/runOffenseNormalized.csv")
defense = read.csv("../../data/runDefenseNormalized.csv")
offense = subset(offense, select = -c(X))
defense = subset(defense, select = -c(X))
######## Offense ###########
set.seed(32)
factoextra::fviz_nbclust(
x = offense,
FUNcluster = kmeans,
method = "wss"
)
factoextra::fviz_nbclust(
x = offense,
FUNcluster = kmeans,
method = "silhouette"
)
offense_clusGap_kmeans <- cluster::clusGap(
x = offense,
FUNcluster = kmeans,
K.max = 40,
iter.max = 50
)
# Plot those results
factoextra::fviz_gap_stat(
gap_stat = offense_clusGap_kmeans
)
factoextra::fviz_nbclust(
x = offense,
FUNcluster = kmeans,
method = "gap_stat"
)
############## offense k = 4 ###########
offense_kmeans4 = kmeans(
x = offense,
centers = 4
)
############## offense k = 4 ###########
offense_kmeans4 = kmeans(
x = offense,
centers = 4
)
# basic view
offense_kmeans4
offense_PC = data.frame(
prcomp(
x = offense,
center = FALSE,
scale. = FALSE
)$x[, 1:2],
Cluster = as.character(offense_kmeans4$cluster),
stringsAsFactors = FALSE
)
require(ggplot2)
require(ggforce)
useful::plot.kmeans(
x = offense_kmeans4,
data = offense
)
fpc::plotcluster(
x=offense,
clvecd = offense_kmeans4$cluster
)
offense_clara <- cluster::clara(
x = offense,
k = 4
)
plot(offense_clara)
print(offense_clara)
######## offense k = 8 ##############
offense_kmeans8 = kmeans(
x = offense,
centers = 8
)
# basic view
offense_kmeans8
offense_PC8 = data.frame(
prcomp(
x = offense,
center = FALSE,
scale. = FALSE
)$x[, 1:2],
Cluster = as.character(offense_kmeans8$cluster),
stringsAsFactors = FALSE
)
useful::plot.kmeans(
x = offense_kmeans8,
data = offense
)
fpc::plotcluster(
x=offense,
clvecd = offense_kmeans8$cluster
)
offense_clara8 <- cluster::clara(
x = offense,
k = 8
)
plot(offense_clara8)
print(offense_clara8)
####### Defense #############
factoextra::fviz_nbclust(
x = defense,
FUNcluster = kmeans,
method = "wss"
)
factoextra::fviz_nbclust(
x = defense,
FUNcluster = kmeans,
method = "silhouette"
)
defense_clusGap_kmeans <- cluster::clusGap(
x = defense,
FUNcluster = kmeans,
K.max = 40,
iter.max = 50
)
# Plot those results
factoextra::fviz_gap_stat(
gap_stat = defense_clusGap_kmeans
)
factoextra::fviz_nbclust(
x = defense,
FUNcluster = kmeans,
method = "gap_stat",
iter.max = 50
)
############## defense k = 4 ###########
defense_kmeans4 = kmeans(
x = defense,
centers = 4
)
# basic view
defense_kmeans4
